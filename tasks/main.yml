---
- name: Check if inotify-tools is installed
  ansible.builtin.package:
    name: inotify-tools
    state: present

- name: Ensure config and vars directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ config_directory }}"
    - "{{ config_directory }}/vars"
  become: true  # Use this only if you need administrative privileges to create directories in the specified path

- name: Generate vars_files for each action
  ansible.builtin.template:
    src: vars_template.yml.j2
    dest: "{{ config_directory }}/{{ item.vars_file }}"
    mode: '0600' 
  loop: "{{ file_action_mappings }}"
  when: item.vars_file is defined and item.vars is defined

- name: Deploy file action mapping configuration
  ansible.builtin.template:
    src: file_action_mapping.yml.j2
    dest: "{{ config_directory }}/file_action_mapping.yml"
    mode: '0644'  # or any other appropriate permission mode


- name: Debug file_action_mappings
  ansible.builtin.debug:
    var: item
  loop: "{{ file_action_mappings }}"

- name: Debug specific variable 'git_repo_dest'
  ansible.builtin.debug:
    msg: "{{ item.vars | selectattr('variable_name', 'equalto', 'git_repo_dest') | map(attribute='value') | list }}"
  loop: "{{ file_action_mappings }}"

- name: Debug git_repo_dest for each item in file_action_mappings
  debug:
    var: item.git_repo_dest
  loop: "{{ file_action_mappings }}"



# Force git download
- name: Download Git repo and run playbook
  become_user: "{{ git_become }}"
  ansible.builtin.git:
    repo: "{{ item.git_repo }}"
    dest: "{{ item.git_repo_dest}}"
    single_branch: yes
    version: main
    separate_git_dir: "{{ item.git_repo_dest}}"
  loop: "{{ file_action_mappings }}"
  register: git_result

    

- name: Deploy the file monitoring script
  ansible.builtin.template:
    src: file_monitor_script.sh.j2
    dest: "{{ monitor_script_path }}"
    mode: '0755'

- name: Create systemd service for file monitoring
  ansible.builtin.template:
    src: file_monitor_service.j2
    dest: "{{ systemd_service_path }}"
    mode: '0644'

- name: Reload systemd to recognize the new service
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable and start file monitoring service
  ansible.builtin.systemd:
    name: "{{ systemd_service_name }}"
    enabled: true
    state: started
